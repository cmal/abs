* Operations and Related Topics

** 8.1. Operators

*** assignment
= variable assignment. No spaces allowed.

注意 = 用作 test operator 时，两边要有括号

#+BEGIN_SRC sh
  #   =  as a test operator

  if [ "$string1" = "$string2" ]
  then
     command
  fi

  #  if [ "X$string1" = "X$string2" ] is safer,
  #+ to prevent an error message should one of the variables be empty.
  #  (The prepended "X" characters cancel out.)
#+END_SRC

*** arithmetic operators
算术运算符，经常出现在 expr 和 let 表达式中
| +  | plus           |
| -  | minus          |
| *  | multiplication |
| /  | division       |
| ** | exponentiation |
| %  | modulo         |
| += | plus-equal     |
| -= | minus-equal    |
| *= | times-equal    |
| /= | slash-equal    |
| %= | mod-equal      |

++

#+BEGIN_SRC sh
    # Bash, version 2.02, introduced the "**" exponentiation operator.
    let "z=5**3"    # 5 * 5 * 5
    echo "z = $z"   # z = 125
#+END_SRC

#+BEGIN_EXAMPLE
bash$ expr 5 % 3
2
bash$ expr 5 / 3
1
#+END_EXAMPLE

% 操作符常用于: 生成某个范围内的常数，格式化程序的输出，生成素数。在数值运算中很常见

旧版本 bash 的 integer 范围是 -2147483648 ~ 2147483647, 超出这个范围的会报错

#+BEGIN_EXAMPLE
  echo $BASH_VERSION   # 1.14

  a=2147483646
  echo "a = $a"        # a = 2147483646
  let "a+=1"           # Increment "a".
  echo "a = $a"        # a = 2147483647
  let "a+=1"           # increment "a" again, past the limit.
  echo "a = $a"        # a = -2147483648
                       #      ERROR: out of range,
                       # +    and the leftmost bit, the sign bit,
                       # +    has been set, making the result negative.
#+END_EXAMPLE

bash 不理解含小数点的浮点数， bash 将含小数点的数理解为字符串

#+BEGIN_EXAMPLE
  a=1.5
  let "b = $a + 1.3"  # Error.
  # t2.sh: let: b = 1.5 + 1.3: syntax error in expression
  #                            (error token is ".5 + 1.3")
  echo "b = $b"       # b=1
#+END_EXAMPLE

*** bitwise operators

| <<  | 按位左移                      |
| <<= | left-shift-equal 给定左移位数 |
| >>  | 按位右移                      |
| >>= | right-shift-equal             |
| &   | 按位与                        |
| &=  | bitwise AND-equal             |
| \vert   | bitwise OR                    |
| \vert=  | bitwise OR-equal              |
| ~   | bitwise NOT                   |
| ^   | bitwise XOR                   |
| ^=  | bitwise XOR-equal             |

在 bash 脚本中 bitwise operators 比较少见，但是在 base64.sh 中有精巧的应用

*** logical (boolean) operators

| !  | NOT |
| && | AND |
| \vert\vert | OR  |


NOT 用法
#+BEGIN_EXAMPLE
  if [ ! -f $FILENAME ]
  then
    ...
#+END_EXAMPLE

AND 用法
#+BEGIN_EXAMPLE
  if [ $condition1 ] && [ $condition2 ]
  #  Same as:  if [ $condition1 -a $condition2 ]
  #  Returns true if both condition1 and condition2 hold true...

  if [[ $condition1 && $condition2 ]]    # Also works.
  #  Note that && operator not permitted inside brackets
  ,#+ of [ ... ] construct.
#+END_EXAMPLE

OR 用法
#+BEGIN_EXAMPLE
  if [ $condition1 ] || [ $condition2 ]
  # Same as:  if [ $condition1 -o $condition2 ]
  # Returns true if either condition1 or condition2 holds true...

  if [[ $condition1 || $condition2 ]]    # Also works.
  #  Note that || operator not permitted inside brackets
  #+ of a [ ... ] construct.
#+END_EXAMPLE

在算术运算上下文中：
#+BEGIN_EXAMPLE
  echo $(( 1 && 2 )) $((3 && 0)) $((4 || 0)) $((0 || 0))
#+END_EXAMPLE

*** miscellaneous operators
   | , | Comma operator |
   逗号操作符将两个或多个算术运算符相连，所有的操作都被执行
   返回最后一个的结果，前面的都是 side effects

   #+BEGIN_EXAMPLE
    let "t1 = ((5 + 3, 7 - 1, 15 - 4))"
    echo "t1 = $t1"           ^^^^^^  # t1 = 11
    # Here t1 is set to the result of the last operation. Why?
    let "t2 = ((a = 9, 15 / 3))"      # Set "a" and calculate "t2".
    echo "t2 = $t2    a = $a"         # t2 = 5    a = 9
   #+END_EXAMPLE

   逗号操作符主要用于 for 循环，参见[[file:../chap11/11-13.sh][Example 11-13]]


** 8.2. Numerical Constants

数字默认为十进制，以0开头的为八进制，以0x开头的为十六进制，还可以用 embedded # 的形式
指定进制， 如 2#101010 为二进制，8#16 为八进制， 16#EF 为十六进制，还可以为 32#，15#，64# 等等

#+BEGIN_EXAMPLE
$ let "a = 8#16"
$ echo $a
14
#+END_EXAMPLE
[[file:8-4.sh][8-4.sh]]

** 8.3. The Double-Parentheses Construct

双括号允许算术运算和求值
$ a=$(( 5 + 3 ))
也允许 C 形式的变量操作
$ (( var++ ))
[[file:8-5.sh][8-5.sh]]

** 8.4. Operator Precedence
http://tldp.org/LDP/abs/html/opprecedence.html

同级运算符从左到右

将多个测试条件拆开写成双括号，使语义更清晰
