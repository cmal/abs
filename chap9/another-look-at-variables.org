* Another Look At Variables
** Internal Variables

| $BASH             | The path to the Bash binary itself                                         |
| $BASH_ENV         | Bash startup file                                                          |
| $BASH_SUBSHELL    | subshell level                                                             |
| $BASHPID          | Process ID of the current instance of Bash                                 |
| $BASH_VERSINFO[n] | a 6 element array indicating current bash version info                     |
| $BASH_VERSION     |                                                                            |
| $CDPATH           | 设置cd命令的默认起点                                                       |
| $DIRSTACK         | The top value in the directory stack (affected by pushd/popd)              |
| $EDITOR           | the default editor invoked by a script                                     |
| $EUID             | "effective" user ID number. Identification number of whatever              |
|                   | identity the current user has assumed, perhaps by means of su.             |
| $FUNCNAME         | name of the current function                                               |
| $GLOBIGNORE       | A list of filename patterns to be excluded from matching in globbing.      |
| $GROUPS           | Groups current user belongs to                                             |
| $HOME             |                                                                            |
| $HOSTNAME         |                                                                            |
| $HOSTTYPE         |                                                                            |
| $IFS              |                                                                            |
| $IGNOREEOF        |                                                                            |
| $LC_COLLATE       | controls collation order in filename expansion and pattern matching        |
| $LC_CTYPE         | controls character interpretation in globbing and pattern matching         |
| $LINENO           | the line number of the shell script in which this variable appears         |
| $MACHTYPE         | machine type                                                               |
| $OLDPWD           | OLD-Print-Working-Directory                                                |
| $OSTYPE           | operating system type                                                      |
| $PATH             |                                                                            |
| $PIPESTATUS       | Array variable holding exit status(es) of last executed foreground pipe    |
| $PPID             | process ID(pid) of its parents process                                     |
| $PROMPT_COMMAND   | A variable holding a command to be executed just before the primary prompt |
| $PS1              | the main prompt                                                            |
| $PS2              | the secondary prompt                                                       |
| $PS3              | the tertiary prompt                                                        |
| $PS4              | the quartenary prompt                                                      |
| $PWD              | working directory, analog to `pwd` builtin command                         |
| $REPLY            | The default value when a variable is not supplied to read                  |
| $SECONDS          | The number of seconds the script has been running                          |
| $SHELLOPTS        | the list of enabled shell options, a readonly variable                     |
| $SHLVL            | Shell level, how deeply Bash is nested.                                    |
| $TMOUT            | seconds to log out                                                         |
| $UID              | user ID number                                                             |


#+BEGIN_SRC sh
  for n in 0 1 2 3 4 5
  do
    echo "BASH_VERSINFO[$n] = ${BASH_VERSINFO[$n]}"
  done
#+END_SRC

#+BEGIN_EXAMPLE
$ cd bash-doc
cd: bash-doc: No such file or directory
$ CDPATH=/usr/share/doc
$ cd bash-doc
/usr/share/doc/bash-doc
$ echo $PWD
/usr/share/doc/bash-doc
#+END_EXAMPLE

#+BEGIN_EXAMPLE
$ echo $GROUPS
$ echo ${GROUPS[1]}
$ echo ${GROUPS[5]}
#+END_EXAMPLE

#+BEGIN_EXAMPLE
bash$ echo $PIPESTATUS
0
bash$ ls -al | bogus_command
bash: bogus_command: command not found
bash$ echo ${PIPESTATUS[1]}
127
bash$ ls -al | bogus_command
bash: bogus_command: command not found
bash$ echo $?
127
#+END_EXAMPLE

#+BEGIN_EXAMPLE
bash$ echo $BASH_VERSION
3.00.14(1)-release
bash$ $ ls | bogus_command | wc
bash: bogus_command: command not found
 0       0       0
bash$ echo ${PIPESTATUS[@]}
141 127 0
#+END_EXAMPLE

?? As a debugging aid, it may be useful to embed diagnostic information in $PS4.
#+BEGIN_EXAMPLE
P4='$(read time junk < /proc/$$/schedstat; echo "@@@ $time @@@ " )'
# Per suggestion by Erik Brandsberg.
set -x
# Various commands follow ...
#+END_EXAMPLE

If, at the command-line, $SHLVL is 1, then in a script it will increment to 2.
