* variable substitution
The name of a variable is a placeholder for its value, the data it holds.
Referencing (retrieving) its value is called variable substitution.

$
变量在声明和赋值的时候不加 $，其他时候都加 $，
比如，在unset的时候，被export的时候，在(())算术表达式中，在表示signal的时候；
赋值有3种情况，=号赋值，在read语句中，在for循环的开头

$variable 实际是 ${variable} 的简化形式

echo "$uninitialized"                                # (blank line)
let "uninitialized += 5"                             # Add 5 to it.
echo "$uninitialized"                                # 5

#  Conclusion:
#  An uninitialized variable has no value,
#+ however it evaluates as 0 in an arithmetic operation.

左值，右值，引用，指针
Technically, the name of a variable is called an lvalue, meaning that it appears on the left side of an assignment statment, as in VARIABLE=23.
A variable's value is an rvalue, meaning that it appears on the right side of an assignment statement, as in VAR2=$VARIABLE.

A variable's name is, in fact, a reference, a pointer to the memory location(s) where the actual data associated with that variable is kept.

* variable assignment
= 可能是赋值，也可能是 test 操作符，取决于上下文
= -eq 都可用于测试

* Bash variables are untyped
Bash 中的变量是无类型的，都是字符串，只不过Bash在不同的上下文中允许他们进行算术运算和变量比较

Bash 允许声明变量

* Special Variable Types
Local variables
Environmental variables

shell 启动的时候，根据自身的环境变量创建shell变量，其子进程继承它的环境

export 变量
report to the environment local to the script
脚本中的子进程中export的变量不会影响到shell本身，只在脚本的子进程中起作用

* Positional parameters
$0, $1, $2, ...
$0是脚本本身的名字，$1是第一个参数，$2是第二个参数

$*  表示上述所有参数，使用时需要加引号
$@  与$@相同，但是每个参数都 quoted string
$#  表示脚本接收到的参数的个数

#+BEGIN_SRC sh
args=$#           # Number of args passed.
lastarg=${!args}
# Note: This is an *indirect reference* to $args ...
# Or:       lastarg=${!#}             (Thanks, Chris Monson.)
# This is an *indirect reference* to the $# variable.
# Note that lastarg=${!$#} doesn't work.
#+END_SRC

null variable assignment

#+BEGIN_SRC sh
variable1_=$1_  # Rather than variable1=$1
# This will prevent an error, even if positional parameter is absent.

critical_argument01=$variable1_

# The extra character can be stripped off later, like so.
variable1=${variable1_/_/}
# Side effects only if $variable1_ begins with an underscore.
# This uses one of the parameter substitution templates discussed later.
# (Leaving out the replacement pattern results in a deletion.)

#  A more straightforward way of dealing with this is
#+ to simply test whether expected positional parameters have been passed.
if [ -z $1 ]
then
  exit $E_MISSING_POS_PARAM
fi

#  However, as Fabian Kreutz points out,
#+ the above method may have unexpected side-effects.
#  A better method is parameter substitution:
#         ${1:-$DefaultVal}
#  See the "Parameter Substition" section
#+ in the "Variables Revisited" chapter.
#+END_SRC

command line $0 is the name of shell

请 man execv
